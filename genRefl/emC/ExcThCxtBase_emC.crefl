
    
//This file is generated by ZBNF/zbnfjax/jzTc/Cheader2Refl.jzTc
#include "emC/ExcThCxtBase_emC.h"  
#include <Jc/ReflectionJc.h>
#include <stddef.h>


extern_C const ClassJc reflection_ExceptionJc;  //the just defined reflection_ used in the own fields.
extern_C const ClassJc reflection_StringJc;  //used for field exceptionMsg

const struct Reflection_Fields_ExceptionJc_t
{ ObjectArrayJc head;
  FieldJc data[3];
} reflection_Fields_ExceptionJc =
{ INIZ_ObjectArrayJc(reflection_Fields_ExceptionJc, 3, FieldJc, null, INIZ_ID_FieldJc)
, {  
    { "exceptionNr"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionJc*)(0x1000))->exceptionNr)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_ExceptionJc
    }
  , 
    { "exceptionValue"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionJc*)(0x1000))->exceptionValue)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_ExceptionJc
    }
  , 
    { "exceptionMsg"
    , 0   //no Array, no Bitfield                           
    , &reflection_StringJc                                                                                            
    , 0|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionJc*)(0x1000))->exceptionMsg)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_ExceptionJc
    }
  
} }; 
                                                    
                                                                   
const ClassJc reflection_ExceptionJc =
{ INIZ_objReflId_ObjectJc(reflection_ExceptionJc, &reflection_ClassJc, INIZ_ID_ClassJc)
, "ExceptionJc"
, 0
, sizeof(ExceptionJc)
, (FieldJcArray const*)&reflection_Fields_ExceptionJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
, null  //virtual table
};



extern_C const ClassJc reflection_Entry_LogException_emC;  //the just defined reflection_ used in the own fields.
extern_C const ClassJc reflection_ExceptionJc;  //used for field exc

const struct Reflection_Fields_Entry_LogException_emC_t
{ ObjectArrayJc head;
  FieldJc data[4];
} reflection_Fields_Entry_LogException_emC =
{ INIZ_ObjectArrayJc(reflection_Fields_Entry_LogException_emC, 4, FieldJc, null, INIZ_ID_FieldJc)
, {  
    { "exc"
    , 0   //no Array, no Bitfield                           
    , &reflection_ExceptionJc                                                                                            
    , 0|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Entry_LogException_emC*)(0x1000))->exc)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_Entry_LogException_emC
    }
  , 
    { "file"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int8                                                                                            
    , kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Entry_LogException_emC*)(0x1000))->file)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_Entry_LogException_emC
    }
  , 
    { "line"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((Entry_LogException_emC*)(0x1000))->line)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_Entry_LogException_emC
    }
  , 
    { "msg"
    , 104 //nrofArrayElements                           
    , REFLECTION_int8                                                                                            
    , (1<<kBitPrimitiv_Modifier_reflectJc) | kStaticArray_Modifier_reflectJc|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Entry_LogException_emC*)(0x1000))->msg)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_Entry_LogException_emC
    }
  
} }; 
                                                    
                                                                   
const ClassJc reflection_Entry_LogException_emC =
{ INIZ_objReflId_ObjectJc(reflection_Entry_LogException_emC, &reflection_ClassJc, INIZ_ID_ClassJc)
, "Entry_LogException_emC"
, 0
, sizeof(Entry_LogException_emC)
, (FieldJcArray const*)&reflection_Fields_Entry_LogException_emC  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
, null  //virtual table
};



extern_C const ClassJc reflection_Store_LogException_emC;  //the just defined reflection_ used in the own fields.
extern_C const ClassJc reflection_Entry_LogException_emC;  //used for field entries

const struct Reflection_Fields_Store_LogException_emC_t
{ ObjectArrayJc head;
  FieldJc data[4];
} reflection_Fields_Store_LogException_emC =
{ INIZ_ObjectArrayJc(reflection_Fields_Store_LogException_emC, 4, FieldJc, null, INIZ_ID_FieldJc)
, {  
    { "identString"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int8                                                                                            
    , kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Store_LogException_emC*)(0x1000))->identString)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_Store_LogException_emC
    }
  , 
    { "zEntries"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((Store_LogException_emC*)(0x1000))->zEntries)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_Store_LogException_emC
    }
  , 
    { "ixEntry"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((Store_LogException_emC*)(0x1000))->ixEntry)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_Store_LogException_emC
    }
  , 
    { "entries"
    , 2 //nrofArrayElements                           
    , &reflection_Entry_LogException_emC                                                                                            
    , 0 | kStaticArray_Modifier_reflectJc|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Store_LogException_emC*)(0x1000))->entries)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_Store_LogException_emC
    }
  
} }; 
                                                    
                                                                   
const ClassJc reflection_Store_LogException_emC =
{ INIZ_objReflId_ObjectJc(reflection_Store_LogException_emC, &reflection_ClassJc, INIZ_ID_ClassJc)
, "Store_LogException_emC"
, 0
, sizeof(Store_LogException_emC)
, (FieldJcArray const*)&reflection_Fields_Store_LogException_emC  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
, null  //virtual table
};

