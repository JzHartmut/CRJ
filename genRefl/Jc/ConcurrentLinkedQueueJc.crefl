
    
//This file is generated by ZBNF/zbnfjax/jzTc/Cheader2Refl.jzTc
#include "Jc/ConcurrentLinkedQueueJc.h"  
#include <Jc/ReflectionJc.h>
#include <stddef.h>


extern_C const ClassJc reflection_Node_ConcurrentLinkedQueueJc;  //the just defined reflection_ used in the own fields.
#define reflection_Node_ConcurrentLinkedQueueJc_t reflection_Node_ConcurrentLinkedQueueJc
extern_C const ClassJc reflection_Node_ConcurrentLinkedQueueJc_t;  //used for field next

const struct Reflection_Fields_Node_ConcurrentLinkedQueueJc_t
{ ObjectArrayJc head;
  FieldJc data[3];
} reflection_Fields_Node_ConcurrentLinkedQueueJc =
{ CONST_ObjectArrayJc(FieldJc, 3, OBJTYPE_FieldJc, null, &reflection_Fields_Node_ConcurrentLinkedQueueJc)
, { { "item"
    , 0   //no Array, no Bitfield
    , REFLECTION_void                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc)|mReference_Modifier_reflectJc //bitModifiers
    , (int16)((int32)(&((Node_ConcurrentLinkedQueueJc*)(0x1000))->item) -(int32)(Node_ConcurrentLinkedQueueJc*)0x1000)
    , 0  //offsetToObjectifcBase
    , &reflection_Node_ConcurrentLinkedQueueJc
    }
  , { "next"
    , 0   //no Array, no Bitfield
    , &reflection_Node_ConcurrentLinkedQueueJc_t                                                                                            
    , 0|mReference_Modifier_reflectJc //bitModifiers
    , (int16)((int32)(&((Node_ConcurrentLinkedQueueJc*)(0x1000))->next) -(int32)(Node_ConcurrentLinkedQueueJc*)0x1000)
    , 0  //offsetToObjectifcBase
    , &reflection_Node_ConcurrentLinkedQueueJc
    }
  ,   
} }; 
                                                    

const ClassJc reflection_Node_ConcurrentLinkedQueueJc =
{ CONST_ObjectJc(OBJTYPE_ClassJc + sizeof(ClassJc), &reflection_Node_ConcurrentLinkedQueueJc, &reflection_ClassJc)
, "Node_ConcurrentLinkedQueueJc"
, 0
, sizeof(Node_ConcurrentLinkedQueueJc)
, (FieldJcArray const*)&reflection_Fields_Node_ConcurrentLinkedQueueJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0 
, null  //virtual table
};



extern_C const ClassJc reflection_ConcurrentLinkedQueueJc_s;  //the just defined reflection_ used in the own fields.
#define reflection_Node_ConcurrentLinkedQueueJc_t reflection_Node_ConcurrentLinkedQueueJc
extern_C const ClassJc reflection_Node_ConcurrentLinkedQueueJc_t;  //used for field head

#define reflection_Node_ConcurrentLinkedQueueJc_t reflection_Node_ConcurrentLinkedQueueJc
extern_C const ClassJc reflection_Node_ConcurrentLinkedQueueJc_t;  //used for field tail

#define reflection_Node_ConcurrentLinkedQueueJc_t reflection_Node_ConcurrentLinkedQueueJc
extern_C const ClassJc reflection_Node_ConcurrentLinkedQueueJc_t;  //used for field refFreeNodePool

#define reflection_Node_ConcurrentLinkedQueueJc_t reflection_Node_ConcurrentLinkedQueueJc
extern_C const ClassJc reflection_Node_ConcurrentLinkedQueueJc_t;  //used for field theFreeNodePool
  

const struct SuperClasses_ConcurrentLinkedQueueJc_s_ClassOffset_idxMtblJcARRAY_t  //Type for the super class
{ ObjectArrayJc head;
  ClassOffset_idxMtblJc data[1];
}  superClasses_ConcurrentLinkedQueueJc_s =   //reflection instance for the super class
{ INITIALIZER_ObjectArrayJc(ClassOffset_idxMtblJc, 1, OBJTYPE_ClassOffset_idxMtblJc, null, &superClasses_ConcurrentLinkedQueueJc_s)
  , { &reflection_ObjectJc, 0} //TODO Index of mtbl of superclass
};

const struct Reflection_Fields_ConcurrentLinkedQueueJc_s_t
{ ObjectArrayJc head;
  FieldJc data[5];
} reflection_Fields_ConcurrentLinkedQueueJc_s =
{ CONST_ObjectArrayJc(FieldJc, 5, OBJTYPE_FieldJc, null, &reflection_Fields_ConcurrentLinkedQueueJc_s)
, { { "head"
    , 0   //no Array, no Bitfield
    , &reflection_Node_ConcurrentLinkedQueueJc_t                                                                                            
    , 0|mReference_Modifier_reflectJc //bitModifiers
    , (int16)((int32)(&((ConcurrentLinkedQueueJc_s*)(0x1000))->head) -(int32)(ConcurrentLinkedQueueJc_s*)0x1000)
    , 0  //offsetToObjectifcBase
    , &reflection_ConcurrentLinkedQueueJc_s
    }
  , { "tail"
    , 0   //no Array, no Bitfield
    , &reflection_Node_ConcurrentLinkedQueueJc_t                                                                                            
    , 0|mReference_Modifier_reflectJc //bitModifiers
    , (int16)((int32)(&((ConcurrentLinkedQueueJc_s*)(0x1000))->tail) -(int32)(ConcurrentLinkedQueueJc_s*)0x1000)
    , 0  //offsetToObjectifcBase
    , &reflection_ConcurrentLinkedQueueJc_s
    }
  , { "refFreeNodePool"
    , 0   //no Array, no Bitfield
    , &reflection_Node_ConcurrentLinkedQueueJc_t                                                                                            
    , 0 //bitModifiers
    , (int16)((int32)(&((ConcurrentLinkedQueueJc_s*)(0x1000))->refFreeNodePool) -(int32)(ConcurrentLinkedQueueJc_s*)0x1000)
    , 0  //offsetToObjectifcBase
    , &reflection_ConcurrentLinkedQueueJc_s
    }
  , { "theFreeNodePool"
    , 0   //no Array, no Bitfield
    , &reflection_Node_ConcurrentLinkedQueueJc_t                                                                                            
    , 0|mReference_Modifier_reflectJc //bitModifiers
    , (int16)((int32)(&((ConcurrentLinkedQueueJc_s*)(0x1000))->theFreeNodePool) -(int32)(ConcurrentLinkedQueueJc_s*)0x1000)
    , 0  //offsetToObjectifcBase
    , &reflection_ConcurrentLinkedQueueJc_s
    }
    
} }; 
                                                    

const ClassJc reflection_ConcurrentLinkedQueueJc_s =
{ CONST_ObjectJc(OBJTYPE_ClassJc + sizeof(ClassJc), &reflection_ConcurrentLinkedQueueJc_s, &reflection_ClassJc)
, "ConcurrentLinkedQueueJc_s"
, 0
, sizeof(ConcurrentLinkedQueueJc_s)
, (FieldJcArray const*)&reflection_Fields_ConcurrentLinkedQueueJc_s  //attributes and associations
, null  //method      
, (ClassOffset_idxMtblJcARRAY*)&superClasses_ConcurrentLinkedQueueJc_s  //superclass  
, null  //interfaces  
, 0 
, null  //virtual table
};

