
    
//This file is generated by ZBNF/zbnfjax/jzTc/Cheader2Refl.jzTc
#include "Jc/ListMapEntryJc.h"  
//#include <emC/Reflection_emC.h>
#include <stddef.h>


extern_C const ClassJc reflection_ListMapEntryJc;  //the just defined reflection_ used in the own fields.
extern_C const ClassJc reflection_ListMapEntryJc;  //used for field parent

extern_C const ClassJc reflection_ListMapEntryJc;  //used for field previous

extern_C const ClassJc reflection_ListMapEntryJc;  //used for field next

extern_C const ClassJc reflection_ObjectJc;  //used for field allocater

extern_C const ClassJc reflection_ObjectJc;  //used for field key

extern_C const ClassJc reflection_ObjectJc;  //used for field element

const struct Reflection_Fields_ListMapEntryJc_t
{ ObjectArrayJc head;
  FieldJc data[6];
} reflection_Fields_ListMapEntryJc =
{ INIZ_ObjectArrayJc(reflection_Fields_ListMapEntryJc, 6, FieldJc, null, INIZ_ID_FieldJc)
, {  
    { "parent"
    , 0   //no Array, no Bitfield                           
    , &reflection_ListMapEntryJc                                                                                            
    , 0 | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ListMapEntryJc*)(0x1000))->parent)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_ListMapEntryJc
    }
  , 
    { "previous"
    , 0   //no Array, no Bitfield                           
    , &reflection_ListMapEntryJc                                                                                            
    , 0 | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ListMapEntryJc*)(0x1000))->previous)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_ListMapEntryJc
    }
  , 
    { "next"
    , 0   //no Array, no Bitfield                           
    , &reflection_ListMapEntryJc                                                                                            
    , 0 | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ListMapEntryJc*)(0x1000))->next)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_ListMapEntryJc
    }
  , 
    { "allocater"
    , 0   //no Array, no Bitfield                           
    , &reflection_ObjectJc                                                                                            
    , 0 | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ListMapEntryJc*)(0x1000))->allocater)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_ListMapEntryJc
    }
  , 
    { "key"
    , 0   //no Array, no Bitfield                           
    , &reflection_ObjectJc                                                                                            
    , 0 | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ListMapEntryJc*)(0x1000))->key)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_ListMapEntryJc
    }
  , 
    { "element"
    , 0   //no Array, no Bitfield                           
    , &reflection_ObjectJc                                                                                            
    , 0 | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ListMapEntryJc*)(0x1000))->element)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &reflection_ListMapEntryJc
    }
  
} }; 
                                                    
                                                                   
const ClassJc reflection_ListMapEntryJc =
{ INIZ_objReflId_ObjectJc(reflection_ListMapEntryJc, &reflection_ClassJc, INIZ_ID_ClassJc)
, "ListMapEntryJc"
, 0
, sizeof(ListMapEntryJc)
, (FieldJcArray const*)&reflection_Fields_ListMapEntryJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
, null  //virtual table
};

