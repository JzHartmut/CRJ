
    
//This file is generated by ZBNF/zbnfjax/jzTc/Cheader2Refl.jzTc
#include "Jc/ObjectRefJc.h"  
#include <Jc/ReflectionJc.h>
#include <stddef.h>


extern_C const ClassJc reflection_ObjectJc_Y;  //the just defined reflection_ used in the own fields.
extern_C const ClassJc reflection_ObjectArrayJc;  //used for field head

extern_C const ClassJc reflection_ObjectJcREF;  //used for field data

const struct Reflection_Fields_ObjectJc_Y_t
{ ObjectArrayJc head;
  FieldJc data[2];
} reflection_Fields_ObjectJc_Y =
{ CONST_ObjectArrayJc(FieldJc, 2, OBJTYPE_FieldJc, null, &reflection_Fields_ObjectJc_Y)
, { { "head"
    , 0   //no Array, no Bitfield
    , &reflection_ObjectArrayJc                                                                                            
    , 0|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)((int32)(&((ObjectJc_Y*)(0x1000))->head) -(int32)(ObjectJc_Y*)0x1000)
    , 0  //offsetToObjectifcBase
    , &reflection_ObjectJc_Y
    }
  , { "data"
    , 50 //nrofArrayElements
    , &reflection_ObjectJcREF                                                                                            
    , 0 | kStaticArray_Modifier_reflectJc|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)((int32)(&((ObjectJc_Y*)(0x1000))->data) -(int32)(ObjectJc_Y*)0x1000)
    , 0  //offsetToObjectifcBase
    , &reflection_ObjectJc_Y
    }
    
} }; 
                                                    

const ClassJc reflection_ObjectJc_Y =
{ CONST_ObjectJc(OBJTYPE_ClassJc + sizeof(ClassJc), &reflection_ObjectJc_Y, &reflection_ClassJc)
, "ObjectJc_Y"
, 0
, sizeof(ObjectJc_Y)
, (FieldJcArray const*)&reflection_Fields_ObjectJc_Y  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0 
, null  //virtual table
};

