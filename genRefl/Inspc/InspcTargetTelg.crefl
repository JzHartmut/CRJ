
    
//This file is generated by ZBNF/zbnfjax/jzTc/Cheader2Refl.jzTc
#include "Inspc/InspcTargetTelg.h"  
#include <Jc/ReflectionJc.h>
#include <stddef.h>


extern_C const ClassJc reflection_InspcTelgHead_Inspc_s;  //the just defined reflection_ used in the own fields.
extern_C const ClassJc reflection_int16BigEndian;  //used for field nrofBytes

extern_C const ClassJc reflection_int16BigEndian;  //used for field cmdTelg

extern_C const ClassJc reflection_int32BigEndian;  //used for field encryption

extern_C const ClassJc reflection_int32BigEndian;  //used for field seqnr

extern_C const ClassJc reflection_int16BigEndian;  //used for field answernr

extern_C const ClassJc reflection_int16BigEndian;  //used for field entrant

const struct Reflection_Fields_InspcTelgHead_Inspc_s_t
{ ObjectArrayJc head;
  FieldJc data[6];
} reflection_Fields_InspcTelgHead_Inspc_s =
{ INIZ_ObjectArrayJc(reflection_Fields_InspcTelgHead_Inspc_s, 6, FieldJc, null, INIZ_ID_FieldJc)
, {  
    { "nrofBytes"
    , 0   //no Array, no Bitfield                           
    , &reflection_int16BigEndian                                                                                            
    , 0|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((InspcTelgHead_Inspc_s*)(0x1000))->nrofBytes)) -0x1000 )
    , 0  //offsetToObjectifcBase
    , &reflection_InspcTelgHead_Inspc_s
    }
  , 
    { "cmdTelg"
    , 0   //no Array, no Bitfield                           
    , &reflection_int16BigEndian                                                                                            
    , 0|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((InspcTelgHead_Inspc_s*)(0x1000))->cmdTelg)) -0x1000 )
    , 0  //offsetToObjectifcBase
    , &reflection_InspcTelgHead_Inspc_s
    }
  , 
    { "encryption"
    , 0   //no Array, no Bitfield                           
    , &reflection_int32BigEndian                                                                                            
    , 0|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((InspcTelgHead_Inspc_s*)(0x1000))->encryption)) -0x1000 )
    , 0  //offsetToObjectifcBase
    , &reflection_InspcTelgHead_Inspc_s
    }
  , 
    { "seqnr"
    , 0   //no Array, no Bitfield                           
    , &reflection_int32BigEndian                                                                                            
    , 0|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((InspcTelgHead_Inspc_s*)(0x1000))->seqnr)) -0x1000 )
    , 0  //offsetToObjectifcBase
    , &reflection_InspcTelgHead_Inspc_s
    }
  , 
    { "answernr"
    , 0   //no Array, no Bitfield                           
    , &reflection_int16BigEndian                                                                                            
    , 0|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((InspcTelgHead_Inspc_s*)(0x1000))->answernr)) -0x1000 )
    , 0  //offsetToObjectifcBase
    , &reflection_InspcTelgHead_Inspc_s
    }
  , 
    { "entrant"
    , 0   //no Array, no Bitfield                           
    , &reflection_int16BigEndian                                                                                            
    , 0|kEmbeddedContainer_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((InspcTelgHead_Inspc_s*)(0x1000))->entrant)) -0x1000 )
    , 0  //offsetToObjectifcBase
    , &reflection_InspcTelgHead_Inspc_s
    }
  
} }; 
                                                    
                                                                   
const ClassJc reflection_InspcTelgHead_Inspc_s =
{ INIZ_objReflId_ObjectJc(reflection_InspcTelgHead_Inspc_s, &reflection_ClassJc, INIZ_ID_ClassJc)
, "InspcTelgHead_Inspc_s"
, 0
, sizeof(InspcTelgHead_Inspc_s)
, (FieldJcArray const*)&reflection_Fields_InspcTelgHead_Inspc_s  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
, null  //virtual table
};

