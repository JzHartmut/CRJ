
    
#include <emC/Base/ExcThCxtBase_emC.h>  


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_ExceptionJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_ExceptionJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


extern_C const ClassJc refl_StringJc;  //used for field exceptionMsg

const struct Reflection_Fields_ExceptionJc_t
{ ObjectArrayJc head;
  FieldJc data[6];
} refl_Fields_ExceptionJc =
{ INIZ_ObjectArrayJc(refl_Fields_ExceptionJc, 6, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "exceptionNr"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionJc*)(0x1000))->exceptionNr)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ExceptionJc
    }
  , 
    { "exceptionValue"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionJc*)(0x1000))->exceptionValue)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ExceptionJc
    }
  , 
    { "val2"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionJc*)(0x1000))->val2)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ExceptionJc
    }
  , 
    { "line"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionJc*)(0x1000))->line)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ExceptionJc
    }
  , 
    { "file"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int8                                                                                            
    , (1<<kBitPrimitiv_Modifier_reflectJc) | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionJc*)(0x1000))->file)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ExceptionJc
    }
  , 
    { "exceptionMsg"
    , 0   //no Array, no Bitfield                           
    , &refl_StringJc                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionJc*)(0x1000))->exceptionMsg)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ExceptionJc
    }
  
} }; 
 

#define DEFINED_refl_ExceptionJc    
const ClassJc   refl_ExceptionJc =
{ INIZ_objReflId_ObjectJc(refl_ExceptionJc, refl_ClassJc, ID_refl_ClassJc)
, "ExceptionJc"
, 0
, sizeof(ExceptionJc)
, (FieldJcArray const*)&refl_Fields_ExceptionJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_TryObjectJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_TryObjectJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


#define DEFINED_refl_TryObjectJc    
const ClassJc   refl_TryObjectJc =
{ INIZ_objReflId_ObjectJc(refl_TryObjectJc, refl_ClassJc, ID_refl_ClassJc)
, "TryObjectJc"
, 0
, sizeof(TryObjectJc)
, null  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_ExceptionStore;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_ExceptionStore[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


extern_C const ClassJc refl_ExceptionJc;  //used for field first

extern_C const ClassJc refl_ExceptionJc;  //used for field last

const struct Reflection_Fields_ExceptionStore_t
{ ObjectArrayJc head;
  FieldJc data[3];
} refl_Fields_ExceptionStore =
{ INIZ_ObjectArrayJc(refl_Fields_ExceptionStore, 3, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "ctException"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_uint32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionStore*)(0x1000))->ctException)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ExceptionStore
    }
  , 
    { "first"
    , 0   //no Array, no Bitfield                           
    , &refl_ExceptionJc                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionStore*)(0x1000))->first)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ExceptionStore
    }
  , 
    { "last"
    , 0   //no Array, no Bitfield                           
    , &refl_ExceptionJc                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ExceptionStore*)(0x1000))->last)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ExceptionStore
    }
  
} }; 
 

#define DEFINED_refl_ExceptionStore    
const ClassJc   refl_ExceptionStore =
{ INIZ_objReflId_ObjectJc(refl_ExceptionStore, refl_ClassJc, ID_refl_ClassJc)
, "ExceptionStore"
, 0
, sizeof(ExceptionStore)
, (FieldJcArray const*)&refl_Fields_ExceptionStore  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_Entry_LogException_emC;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_Entry_LogException_emC[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


extern_C const ClassJc refl_ExceptionJc;  //used for field exc

const struct Reflection_Fields_Entry_LogException_emC_t
{ ObjectArrayJc head;
  FieldJc data[3];
} refl_Fields_Entry_LogException_emC =
{ INIZ_ObjectArrayJc(refl_Fields_Entry_LogException_emC, 3, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "exc"
    , 0   //no Array, no Bitfield                           
    , &refl_ExceptionJc                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Entry_LogException_emC*)(0x1000))->exc)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Entry_LogException_emC
    }
  , 
    { "file"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int8                                                                                            
    , (1<<kBitPrimitiv_Modifier_reflectJc) | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Entry_LogException_emC*)(0x1000))->file)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Entry_LogException_emC
    }
  , 
    { "line"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((Entry_LogException_emC*)(0x1000))->line)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Entry_LogException_emC
    }
  
} }; 
 

#define DEFINED_refl_Entry_LogException_emC    
const ClassJc   refl_Entry_LogException_emC =
{ INIZ_objReflId_ObjectJc(refl_Entry_LogException_emC, refl_ClassJc, ID_refl_ClassJc)
, "Entry_LogException_emC"
, 0
, sizeof(Entry_LogException_emC)
, (FieldJcArray const*)&refl_Fields_Entry_LogException_emC  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_Store_LogException_emC;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_Store_LogException_emC[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


extern_C const ClassJc refl_Entry_LogException_emC;  //used for field entries

const struct Reflection_Fields_Store_LogException_emC_t
{ ObjectArrayJc head;
  FieldJc data[4];
} refl_Fields_Store_LogException_emC =
{ INIZ_ObjectArrayJc(refl_Fields_Store_LogException_emC, 4, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "identString"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int8                                                                                            
    , (1<<kBitPrimitiv_Modifier_reflectJc) | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Store_LogException_emC*)(0x1000))->identString)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Store_LogException_emC
    }
  , 
    { "zEntries"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Store_LogException_emC*)(0x1000))->zEntries)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Store_LogException_emC
    }
  , 
    { "ixEntry"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Store_LogException_emC*)(0x1000))->ixEntry)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Store_LogException_emC
    }
  , 
    { "entries"
    , 0   //no Array, no Bitfield                           
    , &refl_Entry_LogException_emC                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((Store_LogException_emC*)(0x1000))->entries)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Store_LogException_emC
    }
  
} }; 
 

#define DEFINED_refl_Store_LogException_emC    
const ClassJc   refl_Store_LogException_emC =
{ INIZ_objReflId_ObjectJc(refl_Store_LogException_emC, refl_ClassJc, ID_refl_ClassJc)
, "Store_LogException_emC"
, 0
, sizeof(Store_LogException_emC)
, (FieldJcArray const*)&refl_Fields_Store_LogException_emC  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL
