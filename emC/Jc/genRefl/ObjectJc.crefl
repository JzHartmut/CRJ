
    
//This file is generated by ZBNF/zbnfjax/jzTc/Cheader2Refl.jzTc
#include "emC/Jc/ObjectJc.h"  
//#include <stddef.h>


extern_C const ClassJc refl_ComparableJc_base;  //the just defined refl_ used in the own fields.
extern_C const ClassJc refl_ObjectJc;  //used for field object
  

extern_C const ClassJc refl_ObjectJc;  //the super class here used.
const struct SuperClasses_ComparableJc_base_ClassOffset_idxVtblJcARRAY_t  //Type for the super class
{ ObjectArrayJc head;
  ClassOffset_idxVtblJc data[1];
}  superClasses_ComparableJc_base =   //reflection instance for the super class
{ INIZ_ObjectArrayJc(superClasses_ComparableJc_base, 1, ClassOffset_idxVtblJc, null, ID_refl_ClassOffset_idxVtblJc)
  , { &refl_ObjectJc                                   
    , 0 //TODO Index of mtbl of superclass
      //The field which presents the superclass data in inspector access.
    , { "super"              
      , 0 //arraysize
      , &refl_ObjectJc  //type of super                                                                                         
      , kEmbedded_Modifier_reflectJc //hint: embd helps to show the real type.
        | (0<< kBitAccessLevel_Modifier_FieldJc)  //access level
        | (7<< kBitChangeLevel_Modifier_FieldJc)  //never change
      , 0 //offsetalways 0 (C++?)
      , 0  //offsetToObjectifcBase
      , &refl_ObjectJc  
      }
    }
};
                                                                   
const ClassJc refl_ComparableJc_base =
{ INIZ_objReflId_ObjectJc(refl_ComparableJc_base, refl_ClassJc, ID_refl_ClassJc)
, "ComparableJc_base"
, 0
, sizeof(((ComparableJc*)0x1000)->base)
, null  //attributes and associations
, null  //method      
, (ClassOffset_idxVtblJcARRAY*)&superClasses_ComparableJc_base  //superclass  
, null  //interfaces  
, mObjectJc_Modifier_reflectJc   
#ifdef DEF_ClassJc_Vtbl
, null  //virtual table
#endif

};



extern_C const ClassJc refl_ComparableJc;  //the just defined refl_ used in the own fields.
const struct Reflection_Fields_ComparableJc_t
{ ObjectArrayJc head;
  FieldJc data[1];
} refl_Fields_ComparableJc =
{ INIZ_ObjectArrayJc(refl_Fields_ComparableJc, 1, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "base"
    , 0   //no Array, no Bitfield                           
    , &refl_ComparableJc_base                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((ComparableJc*)(0x1000))->base)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_ComparableJc
    }
  
} }; 
 
                                                                   
const ClassJc refl_ComparableJc =
{ INIZ_objReflId_ObjectJc(refl_ComparableJc, refl_ClassJc, ID_refl_ClassJc)
, "ComparableJc"
, 0
, sizeof(ComparableJc)
, (FieldJcArray const*)&refl_Fields_ComparableJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl
, null  //virtual table
#endif

};



extern_C const ClassJc refl_CloseableJc_base;  //the just defined refl_ used in the own fields.
extern_C const ClassJc refl_ObjectJc;  //used for field object
  

extern_C const ClassJc refl_ObjectJc;  //the super class here used.
const struct SuperClasses_CloseableJc_base_ClassOffset_idxVtblJcARRAY_t  //Type for the super class
{ ObjectArrayJc head;
  ClassOffset_idxVtblJc data[1];
}  superClasses_CloseableJc_base =   //reflection instance for the super class
{ INIZ_ObjectArrayJc(superClasses_CloseableJc_base, 1, ClassOffset_idxVtblJc, null, ID_refl_ClassOffset_idxVtblJc)
  , { &refl_ObjectJc                                   
    , 0 //TODO Index of mtbl of superclass
      //The field which presents the superclass data in inspector access.
    , { "super"              
      , 0 //arraysize
      , &refl_ObjectJc  //type of super                                                                                         
      , kEmbedded_Modifier_reflectJc //hint: embd helps to show the real type.
        | (0<< kBitAccessLevel_Modifier_FieldJc)  //access level
        | (7<< kBitChangeLevel_Modifier_FieldJc)  //never change
      , 0 //offsetalways 0 (C++?)
      , 0  //offsetToObjectifcBase
      , &refl_ObjectJc  
      }
    }
};
                                                                   
const ClassJc refl_CloseableJc_base =
{ INIZ_objReflId_ObjectJc(refl_CloseableJc_base, refl_ClassJc, ID_refl_ClassJc)
, "CloseableJc_base"
, 0
, sizeof(((CloseableJc*)0x1000)->base)
, null  //attributes and associations
, null  //method      
, (ClassOffset_idxVtblJcARRAY*)&superClasses_CloseableJc_base  //superclass  
, null  //interfaces  
, mObjectJc_Modifier_reflectJc   
#ifdef DEF_ClassJc_Vtbl
, null  //virtual table
#endif

};



extern_C const ClassJc refl_CloseableJc;  //the just defined refl_ used in the own fields.
const struct Reflection_Fields_CloseableJc_t
{ ObjectArrayJc head;
  FieldJc data[1];
} refl_Fields_CloseableJc =
{ INIZ_ObjectArrayJc(refl_Fields_CloseableJc, 1, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "base"
    , 0   //no Array, no Bitfield                           
    , &refl_CloseableJc_base                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((CloseableJc*)(0x1000))->base)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_CloseableJc
    }
  
} }; 
 
                                                                   
const ClassJc refl_CloseableJc =
{ INIZ_objReflId_ObjectJc(refl_CloseableJc, refl_ClassJc, ID_refl_ClassJc)
, "CloseableJc"
, 0
, sizeof(CloseableJc)
, (FieldJcArray const*)&refl_Fields_CloseableJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl
, null  //virtual table
#endif

};



extern_C const ClassJc refl_FlushableJc_base;  //the just defined refl_ used in the own fields.
extern_C const ClassJc refl_ObjectJc;  //used for field object
  

extern_C const ClassJc refl_ObjectJc;  //the super class here used.
const struct SuperClasses_FlushableJc_base_ClassOffset_idxVtblJcARRAY_t  //Type for the super class
{ ObjectArrayJc head;
  ClassOffset_idxVtblJc data[1];
}  superClasses_FlushableJc_base =   //reflection instance for the super class
{ INIZ_ObjectArrayJc(superClasses_FlushableJc_base, 1, ClassOffset_idxVtblJc, null, ID_refl_ClassOffset_idxVtblJc)
  , { &refl_ObjectJc                                   
    , 0 //TODO Index of mtbl of superclass
      //The field which presents the superclass data in inspector access.
    , { "super"              
      , 0 //arraysize
      , &refl_ObjectJc  //type of super                                                                                         
      , kEmbedded_Modifier_reflectJc //hint: embd helps to show the real type.
        | (0<< kBitAccessLevel_Modifier_FieldJc)  //access level
        | (7<< kBitChangeLevel_Modifier_FieldJc)  //never change
      , 0 //offsetalways 0 (C++?)
      , 0  //offsetToObjectifcBase
      , &refl_ObjectJc  
      }
    }
};
                                                                   
const ClassJc refl_FlushableJc_base =
{ INIZ_objReflId_ObjectJc(refl_FlushableJc_base, refl_ClassJc, ID_refl_ClassJc)
, "FlushableJc_base"
, 0
, sizeof(((FlushableJc*)0x1000)->base)
, null  //attributes and associations
, null  //method      
, (ClassOffset_idxVtblJcARRAY*)&superClasses_FlushableJc_base  //superclass  
, null  //interfaces  
, mObjectJc_Modifier_reflectJc   
#ifdef DEF_ClassJc_Vtbl
, null  //virtual table
#endif

};



extern_C const ClassJc refl_FlushableJc;  //the just defined refl_ used in the own fields.
const struct Reflection_Fields_FlushableJc_t
{ ObjectArrayJc head;
  FieldJc data[1];
} refl_Fields_FlushableJc =
{ INIZ_ObjectArrayJc(refl_Fields_FlushableJc, 1, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "base"
    , 0   //no Array, no Bitfield                           
    , &refl_FlushableJc_base                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((FlushableJc*)(0x1000))->base)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_FlushableJc
    }
  
} }; 
 
                                                                   
const ClassJc refl_FlushableJc =
{ INIZ_objReflId_ObjectJc(refl_FlushableJc, refl_ClassJc, ID_refl_ClassJc)
, "FlushableJc"
, 0
, sizeof(FlushableJc)
, (FieldJcArray const*)&refl_Fields_FlushableJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl
, null  //virtual table
#endif

};



extern_C const ClassJc refl_AppendableJc_base;  //the just defined refl_ used in the own fields.
extern_C const ClassJc refl_ObjectJc;  //used for field object
  

extern_C const ClassJc refl_ObjectJc;  //the super class here used.
const struct SuperClasses_AppendableJc_base_ClassOffset_idxVtblJcARRAY_t  //Type for the super class
{ ObjectArrayJc head;
  ClassOffset_idxVtblJc data[1];
}  superClasses_AppendableJc_base =   //reflection instance for the super class
{ INIZ_ObjectArrayJc(superClasses_AppendableJc_base, 1, ClassOffset_idxVtblJc, null, ID_refl_ClassOffset_idxVtblJc)
  , { &refl_ObjectJc                                   
    , 0 //TODO Index of mtbl of superclass
      //The field which presents the superclass data in inspector access.
    , { "super"              
      , 0 //arraysize
      , &refl_ObjectJc  //type of super                                                                                         
      , kEmbedded_Modifier_reflectJc //hint: embd helps to show the real type.
        | (0<< kBitAccessLevel_Modifier_FieldJc)  //access level
        | (7<< kBitChangeLevel_Modifier_FieldJc)  //never change
      , 0 //offsetalways 0 (C++?)
      , 0  //offsetToObjectifcBase
      , &refl_ObjectJc  
      }
    }
};
                                                                   
const ClassJc refl_AppendableJc_base =
{ INIZ_objReflId_ObjectJc(refl_AppendableJc_base, refl_ClassJc, ID_refl_ClassJc)
, "AppendableJc_base"
, 0
, sizeof(((AppendableJc_s*)0x1000)->base)
, null  //attributes and associations
, null  //method      
, (ClassOffset_idxVtblJcARRAY*)&superClasses_AppendableJc_base  //superclass  
, null  //interfaces  
, mObjectJc_Modifier_reflectJc   
#ifdef DEF_ClassJc_Vtbl
, null  //virtual table
#endif

};



extern_C const ClassJc refl_AppendableJc;  //the just defined refl_ used in the own fields.
const struct Reflection_Fields_AppendableJc_s_t
{ ObjectArrayJc head;
  FieldJc data[1];
} refl_Fields_AppendableJc_s =
{ INIZ_ObjectArrayJc(refl_Fields_AppendableJc_s, 1, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "base"
    , 0   //no Array, no Bitfield                           
    , &refl_AppendableJc_base                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((AppendableJc_s*)(0x1000))->base)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_AppendableJc
    }
  
} }; 
 
                                                                   
const ClassJc refl_AppendableJc =
{ INIZ_objReflId_ObjectJc(refl_AppendableJc, refl_ClassJc, ID_refl_ClassJc)
, "AppendableJc"
, 0
, sizeof(AppendableJc_s)
, (FieldJcArray const*)&refl_Fields_AppendableJc_s  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl
, null  //virtual table
#endif

};

