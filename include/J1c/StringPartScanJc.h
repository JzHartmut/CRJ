/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __J1c_StringPartScanJc_h__
#define __J1c_StringPartScanJc_h__

#include "Fwc/fw_MemC.h"        //basic concept

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Forward declaration of struct ***********************************************/
struct CharSequenceJc_t;
struct StringPartScanJc_t;


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef CharSequenceJcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define CharSequenceJcREFDEF
  struct CharSequenceJc_t;
  DEFINE_EnhancedRefJc(CharSequenceJc);
#endif


/* J2C: includes *********************************************************/
#include "J1c/StringPartJc.h"  //superclass


/*@CLASS_C StringPartScanJc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct StringPartScanJc_t
{ 
  union { ObjectJc object; StringPartJc_s super;} base; 
  int32 beginScan;   /*Position of scanStart() or after scanOk() as begin of next scan operations. */
  struct nLastIntegerNumber_Y { ObjectArrayJc head; int64 data[5]; }nLastIntegerNumber;   /*Buffer for last scanned integer numbers.*/
  int32 idxLastIntegerNumber;   /*current index of the last scanned integer number. -1=nothing scanned. 0..4=valid*/
  struct nLastFloatNumber_Y { ObjectArrayJc head; double data[5]; }nLastFloatNumber;   /*Last scanned float number*/
  int32 idxLastFloatNumber;   /*current index of the last scanned float number. -1=nothing scanned. 0..4=valid*/
  CharSequenceJcREF sLastString;   /*Last scanned string. */
} StringPartScanJc_s;
  

#define sizeof_StringPartScanJc_s sizeof(StringPartScanJc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef StringPartScanJcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define StringPartScanJcREFDEF
  struct StringPartScanJc_t;
  DEFINE_EnhancedRefJc(StringPartScanJc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct StringPartScanJc_X_t { ObjectArrayJc head; StringPartScanJcREF data[50]; } StringPartScanJc_X;
typedef struct StringPartScanJc_Y_t { ObjectArrayJc head; StringPartScanJc_s data[50]; } StringPartScanJc_Y;

 extern_C struct ClassJc_t const reflection_StringPartScanJc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_StringPartScanJc(OBJP) { CONST_ObjectJc(sizeof(StringPartScanJc_s), OBJP, &reflection_StringPartScanJc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_StringPartScanJc_F(ObjectJc* othis, ThCxt* _thCxt);


#define version_StringPartScanJc 20131027  /*Version, history and license.*/


METHOD_C struct StringPartScanJc_t* ctorO_Csii_StringPartScanJc(ObjectJc* othis, struct CharSequenceJc_t* src, int32 begin, int32 end, ThCxt* _thCxt);

METHOD_C struct StringPartScanJc_t* ctorO_Cs_StringPartScanJc(ObjectJc* othis, struct CharSequenceJc_t* src, ThCxt* _thCxt);

METHOD_C struct StringPartScanJc_t* ctorO_StringPartScanJc(ObjectJc* othis, ThCxt* _thCxt);

/*** */
METHOD_C struct StringPartScanJc_t* scanStart_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

METHOD_C bool scanEntry_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

/**Test the result of scanning and set the scan Pos Ok, if current scanning was ok*/
METHOD_C bool scanOk_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

/**scan next content, test the requested String.*/
METHOD_C struct StringPartScanJc_t* scan_StringPartScanJc(StringPartScanJc_s* thiz, struct CharSequenceJc_t* sTestP, ThCxt* _thCxt);

/*** */
METHOD_C struct StringPartScanJc_t* scanQuotion_CsSSY_StringPartScanJc(StringPartScanJc_s* thiz, struct CharSequenceJc_t* sQuotionmarkStart, StringJc sQuotionMarkEnd, StringJc_Y* sResult, ThCxt* _thCxt);

/*** */
METHOD_C struct StringPartScanJc_t* scanQuotion_CsSSYi_StringPartScanJc(StringPartScanJc_s* thiz, struct CharSequenceJc_t* sQuotionmarkStart, StringJc sQuotionMarkEnd, StringJc_Y* sResult, int32 maxToTest, ThCxt* _thCxt);

/**Scans if it is a integer number, contains exclusively of digits 0..9*/
METHOD_C int64 scanDigits_StringPartScanJc(StringPartScanJc_s* thiz, bool bHex, int32 maxNrofChars, ThCxt* _thCxt);

/**Scanns a integer number as positiv value without sign.*/
METHOD_C struct StringPartScanJc_t* scanPositivInteger_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

/**Scans an integer expression with possible sign char '-' at first.*/
METHOD_C struct StringPartScanJc_t* scanInteger_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

/**Scans a float number*/
METHOD_C struct StringPartScanJc_t* scanFloatNumber_b_StringPartScanJc(StringPartScanJc_s* thiz, bool cleanBuffer, ThCxt* _thCxt);

/**Scans a float number*/
METHOD_C struct StringPartScanJc_t* scanFloatNumber_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

/**Scans a sequence of hex chars a hex number*/
METHOD_C struct StringPartScanJc_t* scanHex_StringPartScanJc(StringPartScanJc_s* thiz, int32 maxNrofChars, ThCxt* _thCxt);

/**Scans a integer number possible as hex, or decimal number.*/
METHOD_C struct StringPartScanJc_t* scanHexOrDecimal_StringPartScanJc(StringPartScanJc_s* thiz, int32 maxNrofChars, ThCxt* _thCxt);

/*** */
METHOD_C struct StringPartScanJc_t* scanIdentifier_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

/*** */
METHOD_C struct StringPartScanJc_t* scanIdentifier_SS_StringPartScanJc(StringPartScanJc_s* thiz, StringJc additionalStartChars, StringJc additionalChars, ThCxt* _thCxt);

/**Returns the last scanned integer number*/
METHOD_C int64 getLastScannedIntegerNumber_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

/**Returns the last scanned float number.*/
METHOD_C double getLastScannedFloatNumber_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

/**Returns the part of the last scanning yet only from {@link #scanIdentifier()}*/
METHOD_C struct CharSequenceJc_t* getLastScannedString_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);

/**Gets a String with transliteration.*/
METHOD_C struct CharSequenceJc_t* getCircumScriptionToAnyChar_StringPartScanJc(StringPartScanJc_s* thiz, StringJc sCharsEnd, ThCxt* _thCxt);

/**Gets a String with transliteration and skip over quotation while searchin.*/
METHOD_C struct CharSequenceJc_t* getCircumScriptionToAnyCharOutsideQuotion_StringPartScanJc(StringPartScanJc_s* thiz, StringJc sCharsEnd, ThCxt* _thCxt);

METHOD_C struct CharSequenceJc_t* getCircumScriptionToAnyChar_p_StringPartScanJc(StringPartScanJc_s* thiz, StringJc sCharsEnd, bool bOutsideQuotion, ThCxt* _thCxt);

/**Scans a String with maybe transliterated characters till one of end characters,*/
METHOD_C struct StringPartScanJc_t* scanToAnyChar_StringPartScanJc(StringPartScanJc_s* thiz, CharSequenceJc_Y* dst, StringJc sCharsEnd, char transcriptChar, char quotationStartChar, char quotationEndChar, ThCxt* _thCxt);

/**Closes the work*/
typedef void MT_close_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void close_StringPartScanJc_F(StringPartScanJc_s* thiz, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void close_StringPartScanJc(StringPartScanJc_s* thiz, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_StringPartScanJc[]; //marker for methodTable check
typedef struct Mtbl_StringPartScanJc_t
{ MtblHeadJc head;
  MT_close_StringPartScanJc* close;
  Mtbl_StringPartJc StringPartJc;
} Mtbl_StringPartScanJc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class StringPartScanJc : private StringPartScanJc_s
{ public:

  virtual void close(){ close_StringPartScanJc_F(this,  null/*_thCxt*/); }

  StringPartScanJc(struct CharSequenceJc_t* src){ init_ObjectJc(&this->base.object, sizeof(StringPartScanJc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_StringPartScanJc_s, 0); ctorO_Cs_StringPartScanJc(&this->base.object, src,  null/*_thCxt*/); }

  StringPartScanJc(struct CharSequenceJc_t* src, int32 begin, int32 end){ init_ObjectJc(&this->base.object, sizeof(StringPartScanJc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_StringPartScanJc_s, 0); ctorO_Csii_StringPartScanJc(&this->base.object, src, begin, end,  null/*_thCxt*/); }

  StringPartScanJc(){ init_ObjectJc(&this->base.object, sizeof(StringPartScanJc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_StringPartScanJc_s, 0); ctorO_StringPartScanJc(&this->base.object,  null/*_thCxt*/); }

  struct CharSequenceJc_t* getCircumScriptionToAnyCharOutsideQuotion(StringJcpp sCharsEnd){  return getCircumScriptionToAnyCharOutsideQuotion_StringPartScanJc(this, sCharsEnd,  null/*_thCxt*/); }

  struct CharSequenceJc_t* getCircumScriptionToAnyChar(StringJcpp sCharsEnd){  return getCircumScriptionToAnyChar_StringPartScanJc(this, sCharsEnd,  null/*_thCxt*/); }

  struct CharSequenceJc_t* getCircumScriptionToAnyChar_p(StringJcpp sCharsEnd, bool bOutsideQuotion){  return getCircumScriptionToAnyChar_p_StringPartScanJc(this, sCharsEnd, bOutsideQuotion,  null/*_thCxt*/); }

  double getLastScannedFloatNumber(){  return getLastScannedFloatNumber_StringPartScanJc(this,  null/*_thCxt*/); }

  int64 getLastScannedIntegerNumber(){  return getLastScannedIntegerNumber_StringPartScanJc(this,  null/*_thCxt*/); }

  struct CharSequenceJc_t* getLastScannedString(){  return getLastScannedString_StringPartScanJc(this,  null/*_thCxt*/); }

  int64 scanDigits(bool bHex, int32 maxNrofChars){  return scanDigits_StringPartScanJc(this, bHex, maxNrofChars,  null/*_thCxt*/); }

  bool scanEntry(){  return scanEntry_StringPartScanJc(this,  null/*_thCxt*/); }

  StringPartScanJc& scanFloatNumber(){ scanFloatNumber_StringPartScanJc(this,  null/*_thCxt*/);  return *this; }

  StringPartScanJc& scanFloatNumber(bool cleanBuffer){ scanFloatNumber_b_StringPartScanJc(this, cleanBuffer,  null/*_thCxt*/);  return *this; }

  StringPartScanJc& scanHexOrDecimal(int32 maxNrofChars){ scanHexOrDecimal_StringPartScanJc(this, maxNrofChars,  null/*_thCxt*/);  return *this; }

  StringPartScanJc& scanHex(int32 maxNrofChars){ scanHex_StringPartScanJc(this, maxNrofChars,  null/*_thCxt*/);  return *this; }

  StringPartScanJc& scanIdentifier(StringJcpp additionalStartChars, StringJcpp additionalChars){ scanIdentifier_SS_StringPartScanJc(this, additionalStartChars, additionalChars,  null/*_thCxt*/);  return *this; }

  StringPartScanJc& scanIdentifier(){ scanIdentifier_StringPartScanJc(this,  null/*_thCxt*/);  return *this; }

  StringPartScanJc& scanInteger(){ scanInteger_StringPartScanJc(this,  null/*_thCxt*/);  return *this; }

  bool scanOk(){  return scanOk_StringPartScanJc(this,  null/*_thCxt*/); }

  StringPartScanJc& scanPositivInteger(){ scanPositivInteger_StringPartScanJc(this,  null/*_thCxt*/);  return *this; }

  StringPartScanJc& scanQuotion(struct CharSequenceJc_t* sQuotionmarkStart, StringJcpp sQuotionMarkEnd, StringJc_Y* sResult){ scanQuotion_CsSSY_StringPartScanJc(this, sQuotionmarkStart, sQuotionMarkEnd, sResult,  null/*_thCxt*/);  return *this; }

  StringPartScanJc& scanQuotion(struct CharSequenceJc_t* sQuotionmarkStart, StringJcpp sQuotionMarkEnd, StringJc_Y* sResult, int32 maxToTest){ scanQuotion_CsSSYi_StringPartScanJc(this, sQuotionmarkStart, sQuotionMarkEnd, sResult, maxToTest,  null/*_thCxt*/);  return *this; }

  StringPartScanJc& scanStart(){ scanStart_StringPartScanJc(this,  null/*_thCxt*/);  return *this; }

  struct StringPartScanJc_t* scanToAnyChar(CharSequenceJc_Y* dst, StringJcpp sCharsEnd, char transcriptChar, char quotationStartChar, char quotationEndChar){  return scanToAnyChar_StringPartScanJc(this, dst, sCharsEnd, transcriptChar, quotationStartChar, quotationEndChar,  null/*_thCxt*/); }

  StringPartScanJc& scan(struct CharSequenceJc_t* sTestP){ scan_StringPartScanJc(this, sTestP,  null/*_thCxt*/);  return *this; }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__J1c_StringPartScanJc_h__
