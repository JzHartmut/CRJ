##Zmake generate batch file for Visual Studio Compiler.
##The generated script should be called with following environments:
##* OBJDIR: Only the name of the object directory.

##Note: The Visual Studio Compiler should be installed anywhere and should be able to locate in the file system.
##A batch file named 'setPathMsc6.bat' should be able to located in the path. 
##With this batch file the PATH of the Operation System is enhanced locally to the Visual Studio Tools.
##An example (pattern) for this batch file is given in this directory.

## Note: objDir with backslash for windows. It uses the environment variable.
String objDir = <:><&$OBJPATH><.>;
String objDirW = <:><&$OBJPATH><.>;
String newline = <:>
<.>;
##File fileObjDir = &objDir;






##
##The generate-script for a cc-target. 
##
sub cc(Obj target, String compilerOptions){
##assemble the include path:
String _includePath = <:><:for:includePathItem:includePath.listFiles()><:> /I <&includePathItem.fileW()><.><.for> /I "%INCLUDESTD_MSC6%"<.>;
Obj _outputfile = <:><&target.output.fileW()><.>;
List inputs = target.allInputFilesExpanded();
Obj checkDeps = new org.vishia.checkDeps_C.CheckDependencyFile(console, 1);

String test = checkDeps.setDirObj(<:><&$OBJPATH>/*.doj<.>); 
if(test){ <+><:n>echo Error cfgCheckDep.setDirObj: <&test><&newline><.n+>}
else{ <+><:n>REM cfgCheckDep.setDirObj successfully<&newline><.n+> } 

test = checkDeps.readCfgData("make/cfgCheckDeps.cfg", currdir);
if(test){ <+><:n>echo Error cfgCheckDep.cfg: <&test><&newline><.n+>}
else{ <+><:n>REM cfgCheckDep.cfg read successfully<&newline><.n+> } 

test = checkDeps.readDependencies(<:><&objDir>/ccs_dsp_obj<&$PARAM>.deps.txt<.>); 

<+>
  echo <&target>
  echo compile ><&objDirW>\_cc_ok.txt
  echo compile ><&objDirW>\_cc_error.txt
  echo OBJDIR=<&objDirW> ><&objDirW>\_cc_error.txt
  
  ::attrib -r <&_outputfile>>NUL
<.+>

for(input:inputs){
  ##Problem zmake: < *output.file> is unknown in the loop < :forInput>
  test = checkDeps.processSrcfile(File: &input.file(), input.localfile(), File: &objDir, ".doj");  ##checks whether the file is changed, delete the obj file on changed file.
  String dummy = jzcmd.nextNr();
  String cclabel = jzcmd.nextNr();   ##build a current number for labels. Note: Windows has a problem if batchfiles are written with 0a instead 0d0a (Unix-Lineend). This is reported untruly by 'label not found'.
  String outOptions = <:> /Fa"<&objDirW>\<&input.localdir()>/" /FR"<&objDirW>\<&input.localdir()>/" /Fo"<&objDirW>\<&input.localdir()>/" /Fd"<&objDirW>\<&input.localdir()>/" <.>;
  ##The c-file is located on X: drive because a subst was done on start of the batch file.
  ##The advantage of the X: drive: Same path in headers independent of location of workspace. Binary compareability.
  <+>
    REM call the compiler only if the object file is not found.
    if exist <&objDirW>\<&input.localname()>.doj goto :ok<&cclabel>
      echo compile <&input.localfile()>
      echo compile <&input.localfile()> >><&objDirW>\_cc_ok.txt
      cl.exe <&compilerOptions> <&_includePath> <&outOptions> X:\<&input.localfileW()>  >><&objDirW>\_cc_error.txt  
      if errorlevel 1 goto :error
    :ok<&cclabel>
  
  <.+>
} //for
String test = checkDeps.writeDependencies(<:><&objDir>/ccs_dsp_obj<&$PARAM>.deps.txt<.>); 
String test = checkDeps.close(); 
} //sub




##
##The generate-script for a cc-target. 
##
sub clib(Obj target, String compilerOptions){
<+>

echo build the lib: <&target.output.absfileW()>
lib.exe /OUT:<&target.output.absfileW()> <.+>
List inputs = target.allInputFilesExpanded();
for(input:inputs){
  <+> <&objDirW>\<&input.localname()>.obj<.+>  
} //for



}


sub link(){
}




