<?Java2C-stc www.vishia.org version="0.94" encoding="UTF8" ?>
Structure of translated java-file "MsgDisp/MsgDispatcher_MSG"
package org/vishia/msgDispatch/;

class MsgDispatcher; nameC=MsgDispatcher_MSG_s; argIdent=XX; extends org/vishia/msgDispatch/MsgDispatcherCore //creationMode=P
{  
    //Innerclass: DispatcherThread_MsgDispatcher_MSG
  InnerClass{ 
    nonStaticInner class DispatcherThread; nameC=DispatcherThread_MsgDispatcher_MSG_s; argIdent=XX; extends java/lang/Thread //creationMode=C
    {  
        //Innerclass: DispatcherThread_MsgDispatcher_MSG
        //Innerclass: MsgDispatcher_MSG
    fieldIdents {
      //outer=2 ,super=2: int %.. actNrofListIdents;
      //outer=2 ,super=2: int %.. ctLostMessages;
      int %.. cycleMillisec;
      //outer=2 ,super=2: org/vishia/msgDispatch/MsgDispatcherCore.Entry(instance=org/vishia/msgDispatch/MsgDispatcherCore.Entry) $.. entryMsgBufferOverflow;
      //outer=2 ,super=2: org/vishia/bridgeC/ConcurrentLinkedQueue *.. freeOrders;
      //outer=2 ,super=2: long %.. idThreadForDispatching;
      //outer=2 ,super=2: int[??] X%. listBitDst;
      //outer=2 ,super=2: int[??] X%. listIdents;
      //outer=2 ,super=2: org/vishia/bridgeC/ConcurrentLinkedQueue *.. listOrders;
      //outer=2 ,super=2: int %.d mAdd;
      //outer=2 ,super=2: int %.d mConsole;
      //outer=2 ,super=2: int %.d mConsoleQueued;
      //outer=2 ,super=2: int %.d mDispatchBits;
      //outer=2 ,super=2: int %.d mDispatchInCallingThread;
      //outer=2 ,super=2: int %.d mDispatchInDispatcherThread;
      //outer=2 ,super=2: int %.. mDstMixedOutputs;
      //outer=2 ,super=2: int %.. mDstOneOutput;
      //outer=2 ,super=2: int %.d mRemove;
      //outer=2 ,super=2: int %.d mSet;
      //outer=2 ,super=1: int %.. maxDst;
      //outer=2 ,super=2: org/vishia/msgDispatch/MsgText_ifc @.. msgText;
      //outer=2 ,super=2: int %.. nrofMixedOutputs;
      //outer=2 ,super=1: org/vishia/msgDispatch/LogMessage *.. outputConsole;
      //outer=2 ,super=2: org/vishia/msgDispatch/MsgDispatcherCore.Output[??] X$. outputs;
      //outer=2 ,super=2: java/lang/Runnable @.. runNoEntryMessage;
      //outer=2 ,super=2: org/vishia/msgDispatch/MsgDispatcherCore.TestCnt(instance=org/vishia/msgDispatch/MsgDispatcherCore.TestCnt) $.. testCnt;
      //outer=2 ,super=1: int %.d version;
    }
      methods {  
        run-_$, defined: java/lang/Runnable.run, mode=overrideable: void %.r null();
      }

      castTo {
        org/vishia/msgDispatch/MsgDispatcher: * "(?)->outer" *;
        java/lang/Object: $ "(?).base.super.base.RunnableJc.base.object" $;
        java/lang/Runnable: $ "(?).base.super.base.RunnableJc" $;
        java/lang/Thread: $ "(?).base.super" $;
      }

    }

  }
fieldIdents {
  //outer=1 ,super=2: int %.. actNrofListIdents;
  //outer=1 ,super=2: int %.. ctLostMessages;
  //outer=1 ,super=2: org/vishia/msgDispatch/MsgDispatcherCore.Entry(instance=org/vishia/msgDispatch/MsgDispatcherCore.Entry) $.. entryMsgBufferOverflow;
  //outer=1 ,super=2: org/vishia/bridgeC/ConcurrentLinkedQueue *.. freeOrders;
  //outer=1 ,super=2: long %.. idThreadForDispatching;
  //outer=1 ,super=2: int[??] X%. listBitDst;
  //outer=1 ,super=2: int[??] X%. listIdents;
  //outer=1 ,super=2: org/vishia/bridgeC/ConcurrentLinkedQueue *.. listOrders;
  //outer=1 ,super=2: int %.d mAdd;
  //outer=1 ,super=2: int %.d mConsole;
  //outer=1 ,super=2: int %.d mConsoleQueued;
  //outer=1 ,super=2: int %.d mDispatchBits;
  //outer=1 ,super=2: int %.d mDispatchInCallingThread;
  //outer=1 ,super=2: int %.d mDispatchInDispatcherThread;
  //outer=1 ,super=2: int %.. mDstMixedOutputs;
  //outer=1 ,super=2: int %.. mDstOneOutput;
  //outer=1 ,super=2: int %.d mRemove;
  //outer=1 ,super=2: int %.d mSet;
  int %.. maxDst;
  //outer=1 ,super=2: org/vishia/msgDispatch/MsgText_ifc @.. msgText;
  //outer=1 ,super=2: int %.. nrofMixedOutputs;
  org/vishia/msgDispatch/LogMessage *.. outputConsole;
  //outer=1 ,super=2: org/vishia/msgDispatch/MsgDispatcherCore.Output[??] X$. outputs;
  //outer=1 ,super=2: java/lang/Runnable @.. runNoEntryMessage;
  //outer=1 ,super=2: org/vishia/msgDispatch/MsgDispatcherCore.TestCnt(instance=org/vishia/msgDispatch/MsgDispatcherCore.TestCnt) $.. testCnt;
  int %.d version;
}
  methods {  
    close-_$, defined: org/vishia/msgDispatch/LogMessage.close: void %.r null();
    completeDispatchInThreadBits-_$: int %.r null(int %.. dstBits);
    ctorO-_$, mode=ctor+static: org/vishia/msgDispatch/MsgDispatcher *.. MsgDispatcher_MSG_s(int %.. maxDispatchEntries,int %.. maxQueue,int %.. maxOutputs,int %.. nrofMixedOutputs,int %.. msgIdentQueueOverflow,java/lang/Runnable *.. runNoEntryMessage);
    ctorO_DispatcherThread-_$, mode=ctor+nonStaticCtor: org/vishia/msgDispatch/MsgDispatcher.DispatcherThread *.. DispatcherThread_MsgDispatcher_MSG_s(int %.. cycleMillisec);
    flush-_$, defined: org/vishia/msgDispatch/LogMessage.flush: void %.r null();
    getSharedFreeEntries-_$: org/vishia/bridgeC/ConcurrentLinkedQueue *.r null();
    insertIdent-_$: int %.r null(int %.. idx,int %.. fromIdent,int %.. toIdent);
    reportOutput-_$: boolean %.r null(java/io/FileWriter *.. file);
    setDefaults-_$: void %.r null(java/lang/String(instance=java/lang/String) t.. fileOut);
    setOutputFromString-_$: java/lang/String(instance=java/lang/String) t.r null(java/lang/String(instance=java/lang/String) t.. ctrl,java/lang/StringBuilder *.. errorBuffer);
    setOutputRange-_$: int %.r null(int %.. fromIdent,int %.. toIdent,int %.. dst,int %.. mode,int %.. level);
    setOutputRoutine-_$: void %.r null(int %.. dstIdx,java/lang/String(instance=java/lang/String) t.. name,boolean %.. bQueued,boolean %.. bText,org/vishia/msgDispatch/LogMessage *.. dst);
    stop-_$: void %.r null();
  }

  castTo {
    org/vishia/msgDispatch/LogMessage: $ "(?).base.super.base.LogMessageFW" $;
    org/vishia/msgDispatch/MsgDispatcherCore: $ "(?).base.super" $;
    java/lang/Object: $ "(?).base.super.base.LogMessageFW.base.object" $;
  }

}
