<?Java2C-stc www.vishia.org version="0.94" encoding="UTF8" ?>
Structure of translated java-file "InspcJ2c/InspcDataExchangeAccess_Inspc"
package org/vishia/communication/;

final class InspcDataExchangeAccess; nameC=InspcDataExchangeAccess_Inspc_s; argIdent=XX; extends java/lang/Object //creationMode=P
{  
    //Innerclass: InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc
    //Innerclass: InspcDatagram_InspcDataExchangeAccess_Inspc
    //Innerclass: InspcSetValue_InspcDataExchangeAccess_Inspc
    //Innerclass: InspcSetValueData_InspcDataExchangeAccess_Inspc
    //Innerclass: Inspcitem_InspcDataExchangeAccess_Inspc
  InnerClass{ 
    final class InspcDatagram; nameC=InspcDatagram_InspcDataExchangeAccess_Inspc_s; argIdent=XX; extends org/vishia/byteData/ByteDataAccessBase //creationMode=C
    {  
        //Innerclass: InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDatagram_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValue_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValueData_InspcDataExchangeAccess_Inspc
        //Innerclass: Inspcitem_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDataExchangeAccess_Inspc
    fieldIdents {
      //outer=1 ,super=2: boolean %.. bBigEndian;
      //outer=1 ,super=2: boolean %.. bExc;
      //outer=1 ,super=2: boolean %.. bExpand;
      //outer=1 ,super=2: java/nio/charset/Charset *.. charset;
      //outer=1 ,super=2: org/vishia/byteData/ByteDataAccessBase @.. currChild;
      //outer=1 ,super=2: byte[??] M%. data;
      //outer=1 ,super=2: int %.. ixBegin;
      //outer=1 ,super=2: int %.. ixEnd;
      //outer=1 ,super=2: int %.. ixNextChild;
      //outer=2 ,super=1: short %.d kInvalidHandle;
      //outer=2 ,super=1: short %.d kLengthAndString;
      //outer=2 ,super=1: short %.d kReferenceAddr;
      //outer=2 ,super=1: short %.d kReferenceAddr64;
      //outer=2 ,super=1: short %.d kScalarTypes;
      //outer=2 ,super=1: short %.d kTypeNoValue;
      int %.d kanswerNr;
      int %.d kencryption;
      int %.d knEntrant;
      int %.d knrofBytes;
      int %.d kseqnr;
      int %.d kspare13;
      int %.d kspare14;
      //outer=2 ,super=1: short %.d maxNrOfChars;
      //outer=2 ,super=1: int[24] Q%S nrofBytesSpecialTypes;
      //outer=1 ,super=2: org/vishia/byteData/ByteDataAccessBase @.. parent;
      //outer=1 ,super=2: int %.. sizeHead;
      int %.d sizeofHead;
      //outer=1 ,super=2: java/lang/String(instance=java/lang/String) t.s version;
    }
      methods {  
        assignDatagram-_$, mode=noThCxt: void %.r null(byte[??] M%. data,int %.. length);
        ctorM-_$, mode=ctor+static: org/vishia/communication/InspcDataExchangeAccess.InspcDatagram *.. InspcDatagram_InspcDataExchangeAccess_Inspc_s();
        ctorM+_iY-_$, mode=ctor+static: org/vishia/communication/InspcDataExchangeAccess.InspcDatagram *.. InspcDatagram_InspcDataExchangeAccess_Inspc_s(byte[??] M%. buffer);
        getAnswerNr-_$, mode=noThCxt: int %.r null();
        getEncryption-_$, mode=noThCxt: int %.r null();
        getEntrant-_$, mode=noThCxt: int %.r null();
        getLengthDatagram-_$, mode=noThCxt: int %.r null();
        getSeqnr-_$, mode=noThCxt: int %.r null();
        incrAnswerNr-_$: void %.r null();
        lastAnswer-_$, mode=noThCxt: boolean %.r null();
        markAnswerNrLast-_$: void %.r null();
        setEntrant-_$, mode=noThCxt: void %.r null(int %.. nr);
        setHeadAnswer-_$: void %.r null(int %.. entrant,int %.. seqNr,int %.. encryption);
        setHeadRequest-_$: void %.r null(int %.. entrant,int %.. seqNr,int %.. encryption);
        setLengthDatagram-_$, mode=noThCxt: void %.r null(int %.. length);
        setSeqnr-_$, mode=noThCxt: void %.r null(int %.. nr);
      }

      castTo {
        org/vishia/byteData/ByteDataAccessBase: $ "(?).base.super" $;
        org/vishia/communication/InspcDataExchangeAccess: * "(?)->outer" *;
      }

    }

    class Inspcitem; nameC=Inspcitem_InspcDataExchangeAccess_Inspc_s; argIdent=XX; extends org/vishia/byteData/ByteDataAccessBase //creationMode=C
    {  
        //Innerclass: InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDatagram_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValue_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValueData_InspcDataExchangeAccess_Inspc
        //Innerclass: Inspcitem_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDataExchangeAccess_Inspc
    fieldIdents {
      //outer=1 ,super=2: boolean %.. bBigEndian;
      //outer=1 ,super=2: boolean %.. bExc;
      //outer=1 ,super=2: boolean %.. bExpand;
      //outer=1 ,super=2: java/nio/charset/Charset *.. charset;
      //outer=1 ,super=2: org/vishia/byteData/ByteDataAccessBase @.. currChild;
      //outer=1 ,super=2: byte[??] M%. data;
      //outer=1 ,super=2: int %.. ixBegin;
      //outer=1 ,super=2: int %.. ixEnd;
      //outer=1 ,super=2: int %.. ixNextChild;
      int %.d kAnswerFieldMethod;
      int %.d kAnswerMsg;
      int %.d kAnswerRegisterHandle;
      int %.d kAnswerRemoveMsgNok;
      int %.d kAnswerRemoveMsgOk;
      int %.d kAnswerValue;
      int %.d kAnswerValueByHandle;
      int %.d kAnswervaluedata;
      int %.d kFailedCommand;
      int %.d kFailedHandle;
      int %.d kFailedPath;
      int %.d kFailedRegisterRepeat;
      int %.d kFailedValue;
      int %.d kGetAddressByPath;
      int %.d kGetFields;
      int %.d kGetMsg;
      int %.d kGetValueByHandle;
      int %.d kGetValueByPath;
      //outer=2 ,super=1: short %.d kInvalidHandle;
      //outer=2 ,super=1: short %.d kLengthAndString;
      int %.d kNoRessource;
      //outer=2 ,super=1: short %.d kReferenceAddr;
      //outer=2 ,super=1: short %.d kReferenceAddr64;
      int %.d kRegisterHandle;
      int %.d kRemoveMsg;
      //outer=2 ,super=1: short %.d kScalarTypes;
      int %.d kSetStringByPath;
      int %.d kSetValueByPath;
      int %.d kSetvaluedata;
      //outer=2 ,super=1: short %.d kTypeNoValue;
      int %.d kbyteOrder;
      //outer=2 ,super=1: short %.d maxNrOfChars;
      //outer=2 ,super=1: int[24] Q%S nrofBytesSpecialTypes;
      //outer=1 ,super=2: org/vishia/byteData/ByteDataAccessBase @.. parent;
      //outer=1 ,super=2: int %.. sizeHead;
      int %.d sizeofHead;
      //outer=1 ,super=2: java/lang/String(instance=java/lang/String) t.s version;
    }
      methods {  
        ctorM-_$, mode=ctor+static: org/vishia/communication/InspcDataExchangeAccess.Inspcitem *.. Inspcitem_InspcDataExchangeAccess_Inspc_s();
        ctorM+_i-_$, mode=ctor+static: org/vishia/communication/InspcDataExchangeAccess.Inspcitem *.. Inspcitem_InspcDataExchangeAccess_Inspc_s(int %.. sizeHeadDerived);
        getCmd-_$, mode=noThCxt: int %.r null();
        getLenInfo-_$, mode=noThCxt: int %.r null();
        getOrder-_$, mode=noThCxt: int %.r null();
        setCmd-_$, mode=noThCxt: void %.r null(int %.. cmd);
        setInfoHead-_$: void %.r null(int %.. length,int %.. cmd,int %.. order);
        setLength-_$, mode=noThCxt: void %.r null(int %.. length);
      }

      castTo {
        org/vishia/byteData/ByteDataAccessBase: $ "(?).base.super" $;
        org/vishia/communication/InspcDataExchangeAccess: * "(?)->outer" *;
      }

    }

    final class InspcSetValue; nameC=InspcSetValue_InspcDataExchangeAccess_Inspc_s; argIdent=XX; extends org/vishia/byteData/ByteDataAccessBase //creationMode=C
    {  
        //Innerclass: InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDatagram_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValue_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValueData_InspcDataExchangeAccess_Inspc
        //Innerclass: Inspcitem_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDataExchangeAccess_Inspc
    fieldIdents {
      //outer=1 ,super=2: boolean %.. bBigEndian;
      //outer=1 ,super=2: boolean %.. bExc;
      //outer=1 ,super=2: boolean %.. bExpand;
      //outer=1 ,super=2: java/nio/charset/Charset *.. charset;
      //outer=1 ,super=2: org/vishia/byteData/ByteDataAccessBase @.. currChild;
      //outer=1 ,super=2: byte[??] M%. data;
      //outer=1 ,super=2: int %.. ixBegin;
      //outer=1 ,super=2: int %.. ixEnd;
      //outer=1 ,super=2: int %.. ixNextChild;
      //outer=2 ,super=1: short %.d kInvalidHandle;
      //outer=2 ,super=1: short %.d kLengthAndString;
      //outer=2 ,super=1: short %.d kReferenceAddr;
      //outer=2 ,super=1: short %.d kReferenceAddr64;
      //outer=2 ,super=1: short %.d kScalarTypes;
      int %.d kType;
      //outer=2 ,super=1: short %.d kTypeNoValue;
      //outer=2 ,super=1: short %.d maxNrOfChars;
      //outer=2 ,super=1: int[24] Q%S nrofBytesSpecialTypes;
      //outer=1 ,super=2: org/vishia/byteData/ByteDataAccessBase @.. parent;
      //outer=1 ,super=2: int %.. sizeHead;
      int %.d sizeofElement;
      //outer=1 ,super=2: java/lang/String(instance=java/lang/String) t.s version;
    }
      methods {  
        ctorM-_$, mode=ctor+static: org/vishia/communication/InspcDataExchangeAccess.InspcSetValue *.. InspcSetValue_InspcDataExchangeAccess_Inspc_s();
        getByte-_$, mode=noThCxt: byte %.r null();
        getDouble-_$, mode=noThCxt: double %.r null();
        getFloat-_$, mode=noStacktrace+noThCxt: float %.r null();
        getInt-_$, mode=noStacktrace+noThCxt: int %.r null();
        getLong-_$, mode=noStacktrace+noThCxt: long %.r null();
        getPwd-_$, mode=noThCxt: long %.r null();
        getShort-_$, mode=noThCxt: short %.r null();
        getType-_$, mode=noThCxt: short %.r null();
        setBool-_$, mode=noThCxt: void %.r null(int %.. value);
        setByte-_$, mode=noThCxt: void %.r null(int %.. value);
        setDouble-_$, mode=noThCxt: void %.r null(double %.. value);
        setFloat-_$, mode=noThCxt: void %.r null(float %.. value);
        setFloatIntImage-_$, mode=noThCxt: void %.r null(int %.. value);
        setInt-_$, mode=noThCxt: void %.r null(int %.. value);
        setLong-_$, mode=noThCxt: void %.r null(long %.. value);
        setPwd-_$, mode=noThCxt: void %.r null(int %.. pwd);
        setShort-_$, mode=noThCxt: void %.r null(int %.. value);
      }

      castTo {
        org/vishia/byteData/ByteDataAccessBase: $ "(?).base.super" $;
        org/vishia/communication/InspcDataExchangeAccess: * "(?)->outer" *;
      }

    }

    final class InspcSetValueData; nameC=InspcSetValueData_InspcDataExchangeAccess_Inspc_s; argIdent=XX; extends org/vishia/communication/InspcDataExchangeAccess.Inspcitem //creationMode=C
    {  
        //Innerclass: InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDatagram_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValue_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValueData_InspcDataExchangeAccess_Inspc
        //Innerclass: Inspcitem_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDataExchangeAccess_Inspc
    fieldIdents {
      //outer=1 ,super=3: boolean %.. bBigEndian;
      //outer=1 ,super=3: boolean %.. bExc;
      //outer=1 ,super=3: boolean %.. bExpand;
      //outer=1 ,super=3: java/nio/charset/Charset *.. charset;
      //outer=1 ,super=3: org/vishia/byteData/ByteDataAccessBase @.. currChild;
      //outer=1 ,super=3: byte[??] M%. data;
      //outer=1 ,super=3: int %.. ixBegin;
      //outer=1 ,super=3: int %.. ixEnd;
      //outer=1 ,super=3: int %.. ixNextChild;
      //outer=2 ,super=1: short %.d kInvalidHandle;
      //outer=2 ,super=1: short %.d kLengthAndString;
      //outer=2 ,super=1: short %.d kReferenceAddr;
      //outer=2 ,super=1: short %.d kReferenceAddr64;
      //outer=2 ,super=1: short %.d kScalarTypes;
      //outer=2 ,super=1: short %.d kTypeNoValue;
      //outer=2 ,super=1: short %.d maxNrOfChars;
      //outer=2 ,super=1: int[24] Q%S nrofBytesSpecialTypes;
      //outer=1 ,super=3: org/vishia/byteData/ByteDataAccessBase @.. parent;
      //outer=1 ,super=3: int %.. sizeHead;
      int %.d sizeofElement;
      //outer=1 ,super=3: java/lang/String(instance=java/lang/String) t.s version;
    }
      methods {  
        ctorM-_$, mode=ctor+static: org/vishia/communication/InspcDataExchangeAccess.InspcSetValueData *.. InspcSetValueData_InspcDataExchangeAccess_Inspc_s();
        setAddress-_$, mode=noThCxt: void %.r null(int %.. address);
        setBool-_$: void %.r null(int %.. value);
        setByte-_$: void %.r null(int %.. value);
        setDouble-_$: void %.r null(double %.. value);
        setFloat-_$: void %.r null(float %.. value);
        setFloatIntImage-_$: void %.r null(int %.. value);
        setHead-_$, mode=noThCxt: void %.r null(int %.. order);
        setInt-_$: void %.r null(int %.. value);
        setLong-_$: void %.r null(long %.. value);
        setPosition-_$, mode=noThCxt: void %.r null(int %.. position);
        setShort-_$: void %.r null(int %.. value);
      }

      castTo {
        org/vishia/byteData/ByteDataAccessBase: $ "(?).base.super.base.super" $;
        org/vishia/communication/InspcDataExchangeAccess: * "(?)->outer" *;
        org/vishia/communication/InspcDataExchangeAccess.Inspcitem: $ "(?).base.super" $;
      }

    }

    final class InspcAnswerValueByHandle; nameC=InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s; argIdent=XX; extends org/vishia/communication/InspcDataExchangeAccess.Inspcitem //creationMode=C
    {  
        //Innerclass: InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDatagram_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValue_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcSetValueData_InspcDataExchangeAccess_Inspc
        //Innerclass: Inspcitem_InspcDataExchangeAccess_Inspc
        //Innerclass: InspcDataExchangeAccess_Inspc
    fieldIdents {
      //outer=1 ,super=3: boolean %.. bBigEndian;
      //outer=1 ,super=3: boolean %.. bExc;
      //outer=1 ,super=3: boolean %.. bExpand;
      //outer=1 ,super=3: java/nio/charset/Charset *.. charset;
      //outer=1 ,super=3: org/vishia/byteData/ByteDataAccessBase @.. currChild;
      //outer=1 ,super=3: byte[??] M%. data;
      //outer=1 ,super=3: int %.. ixBegin;
      //outer=1 ,super=3: int %.. ixEnd;
      //outer=1 ,super=3: int %.. ixNextChild;
      //outer=2 ,super=1: short %.d kInvalidHandle;
      //outer=2 ,super=1: short %.d kLengthAndString;
      //outer=2 ,super=1: short %.d kReferenceAddr;
      //outer=2 ,super=1: short %.d kReferenceAddr64;
      //outer=2 ,super=1: short %.d kScalarTypes;
      //outer=2 ,super=1: short %.d kTypeNoValue;
      //outer=2 ,super=1: short %.d maxNrOfChars;
      //outer=2 ,super=1: int[24] Q%S nrofBytesSpecialTypes;
      //outer=1 ,super=3: org/vishia/byteData/ByteDataAccessBase @.. parent;
      //outer=1 ,super=3: int %.. sizeHead;
      int %.d sizeofElement;
      //outer=1 ,super=3: java/lang/String(instance=java/lang/String) t.s version;
    }
      methods {  
        ctorM-_$, mode=ctor+static: org/vishia/communication/InspcDataExchangeAccess.InspcAnswerValueByHandle *.. InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s();
        ctorM+_XX-_$, mode=ctor+static: org/vishia/communication/InspcDataExchangeAccess.InspcAnswerValueByHandle *.. InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s(org/vishia/communication/InspcDataExchangeAccess.Inspcitem *.. src);
        getIxHandleFrom-_$: int %.r null();
        getIxHandleTo-_$: int %.r null();
        setIxHandleFrom-_$: void %.r null(int %.. val);
        setIxHandleTo-_$: void %.r null(int %.. val);
      }

      castTo {
        org/vishia/byteData/ByteDataAccessBase: $ "(?).base.super.base.super" $;
        org/vishia/communication/InspcDataExchangeAccess: * "(?)->outer" *;
        org/vishia/communication/InspcDataExchangeAccess.Inspcitem: $ "(?).base.super" $;
      }

    }

  }
fieldIdents {
  short %.d kInvalidHandle;
  short %.d kLengthAndString;
  short %.d kReferenceAddr;
  short %.d kReferenceAddr64;
  short %.d kScalarTypes;
  short %.d kTypeNoValue;
  short %.d maxNrOfChars;
  int[24] Q%S nrofBytesSpecialTypes;
  java/lang/String(instance=java/lang/String) t.s version;
}
  methods {  
    ctorO-_$, mode=ctor+static: org/vishia/communication/InspcDataExchangeAccess *.. InspcDataExchangeAccess_Inspc_s();
    getFloatChild-_$, mode=static: float %.r null(short %.. type,org/vishia/byteData/ByteDataAccessBase *.. access);
    getIntChild-_$, mode=static: int %.r null(short %.. type,org/vishia/byteData/ByteDataAccessBase *.. access);
    nrofBytesForType-_$, mode=static: int %.r null(short %.. type);
  }

  castTo {
    java/lang/Object: $ "(?).base.object" $;
  }

}
