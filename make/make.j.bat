java -cp D:/vishia/Java/exe/zbnf.jar org.vishia.zTextGen.Jbat make.j.bat
exit

==jbat==

set env = "text";




main(){

  Obj zmake = java org.vishia.zmake.Zmake.parseUserScript(
      "Jc.lib.zmake", <:><*$$ZBNFJAX_HOME>/zmake/ZmakeStd.zbnf<.>, mainCmdLogging, jbatAccess, "Test");
  onerror file { <+err><*errorMsg><.n+> break; }  
  onerror notfound { <+err><*errorMsg><.+> break; onerror {<+err>unknown<.+>}}  
  
  ##debug-output for all jbat data.
  Openfile outjbatData = "dataJbat.data.xml";
  Obj outData = new org.vishia.jbat.OutputDataTree;
  outData.outputXml(jbatAccess, outjbatData);
  outjbatData.close();
  onerror { <+err><*errorMsg><.n+> break; }
  
  Openfile compilebat = "compile.bat";
  <+compilebat>REM generated by CRuntimeJavalike/make/make.j.bat<.n+>
  for(target:zmake.targets){
    call target.translator(target=target, compilebat=compilebat);
  }
  compilebat = <:>REM end of generation<:n><.> ;
  compilebat.close();
  ##cmd "compile.bat" ;
}


sub clib(target, compilebat){
  <+compilebat>REM info target: <*debug.info(target)><.n+>; 
  StringAppend _outputfile = target.output.fileW();
  String objDir = <:>T:\CRuntimeJavalike\lib\baseJcD<.>;
  List inputs = target.allInputFilesExpanded();

  REM check prepare checker for dependencies of files:
  Obj checkDeps = new org.vishia.checkDeps_C.CheckDependencyFile(mainCmdLogging);
  checkDeps.setDirObj(<:><*objDir>/*.doj<.>);
  checkDeps.readCfgData("cfgCheckDep.cfg");
  onerror {<+err><*errorMsg><.n+>; break; }
  
  ##test
  compilebat = debug.infoln("REM info compileOptions:", target.params.compileOptions);
  compilebat.flush();
  
  ##assemble the include path:
  compilebat = debug.infoln("REM includePath:", target.script.varZmake.includePath);
  
  ##first variant of includePath building 
  StringAppend includePath;
  for(include: target.script.varZmake.includePath.files()){
    includePath = <:> /I ../../../<*include.localfile()><.>;
  }
  <+compilebat>REM <*includePath><.n+>
  
  ##second variant of includePath building 
  String includePath1 = <:><:for:include1:target.script.varZmake.includePath.files()>
                             <:> /I ../../../<*include1.localfile()><.>
                            <.for><.>;
  <+compilebat>REM includePath1 = <*includePath1><.n+>;
  
  
  <+compilebat>REM <*includePath><.n+>;
  ##All Source files:
  for(input: inputs){
    checkDeps.processSrcfile(input.absfile(), input.localfile(), ".obj");  ##checks whether the file is changed, delete the obj file on 
    String cc=<:>"D:\Programme\MSC6\act\Microsoft Visual Studio\VC98\Bin\CL.EXE" <*target.params.compileOptions.text()><*includePath> /D "WIN32" /D "NDEBUG" /D "_MBCS" /D "_LIB" /FR"<*objDir>\\" /Fo"<*objDir>\\" /Fd"<*objDir>\\" /FD /c<.> ;
    <+compilebat><*cc> <*input.file()><.n+>;
  }
   
}