/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __Ipc2c_InterProcessCommRxThread_Ipc_h__
#define __Ipc2c_InterProcessCommRxThread_Ipc_h__

#include "Fwc/fw_MemC.h"        //basic concept

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Forward declaration of struct ***********************************************/
struct Address_InterProcessComm_t;
struct C_threadRoutine_InterProcessCommRxThread_Ipc_t;
struct InterProcessComm_t;
struct InterProcessCommRxThread_Ipc_t;
struct InterProcessCommRx_ifc_Ipc_t;
struct ThreadJc_t;


/* J2C: includes *********************************************************/
#include "Jc/ThreadJc.h"  //interface


/*@CLASS_C C_threadRoutine_InterProcessCommRxThread_Ipc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct C_threadRoutine_InterProcessCommRxThread_Ipc_t
{ 
  union { ObjectJc object; RunnableJc_s RunnableJc;} base; 
  struct InterProcessCommRxThread_Ipc_t* outer;  //J2C: Reference to outer class, implicit in Java
} C_threadRoutine_InterProcessCommRxThread_Ipc_s;
  

#define sizeof_C_threadRoutine_InterProcessCommRxThread_Ipc_s sizeof(C_threadRoutine_InterProcessCommRxThread_Ipc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef C_threadRoutine_InterProcessCommRxThread_IpcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define C_threadRoutine_InterProcessCommRxThread_IpcREFDEF
  struct C_threadRoutine_InterProcessCommRxThread_Ipc_t;
  DEFINE_EnhancedRefJc(C_threadRoutine_InterProcessCommRxThread_Ipc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct C_threadRoutine_InterProcessCommRxThread_Ipc_X_t { ObjectArrayJc head; C_threadRoutine_InterProcessCommRxThread_IpcREF data[50]; } C_threadRoutine_InterProcessCommRxThread_Ipc_X;
typedef struct C_threadRoutine_InterProcessCommRxThread_Ipc_Y_t { ObjectArrayJc head; C_threadRoutine_InterProcessCommRxThread_Ipc_s data[50]; } C_threadRoutine_InterProcessCommRxThread_Ipc_Y;

 extern_C struct ClassJc_t const reflection_C_threadRoutine_InterProcessCommRxThread_Ipc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_C_threadRoutine_InterProcessCommRxThread_Ipc(OBJP) { CONST_ObjectJc(sizeof(C_threadRoutine_InterProcessCommRxThread_Ipc_s), OBJP, &reflection_C_threadRoutine_InterProcessCommRxThread_Ipc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_C_threadRoutine_InterProcessCommRxThread_Ipc_F(ObjectJc* othis, ThCxt* _thCxt);




/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void run_C_threadRoutine_InterProcessCommRxThread_Ipc_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void run_C_threadRoutine_InterProcessCommRxThread_Ipc(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_C_threadRoutine_InterProcessCommRxThread_Ipc[]; //marker for methodTable check
typedef struct Mtbl_C_threadRoutine_InterProcessCommRxThread_Ipc_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
  //Method table of interfaces:
  Mtbl_RunnableJc RunnableJc;
} Mtbl_C_threadRoutine_InterProcessCommRxThread_Ipc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class C_threadRoutine_InterProcessCommRxThread_Ipc : private C_threadRoutine_InterProcessCommRxThread_Ipc_s
{ public:

  virtual void run(){ run_C_threadRoutine_InterProcessCommRxThread_Ipc_F(&this->base.RunnableJc.base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/


/**Default constructor. */
METHOD_C struct C_threadRoutine_InterProcessCommRxThread_Ipc_t* ctorO_C_threadRoutine_InterProcessCommRxThread_Ipc(struct InterProcessCommRxThread_Ipc_t* outer, ObjectJc* othis, ThCxt* _thCxt);


/*@CLASS_C InterProcessCommRxThread_Ipc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InterProcessCommRxThread_Ipc_t
{ 
  union { ObjectJc object; } base; 
  struct InterProcessCommRx_ifc_Ipc_t* execRxData;   /**/
  char state;   /*State of function.*/
  bool bEnablePrintfOnComm; 
  struct InterProcessComm_t* ipc;   /**/
  int32 ctErrorTelg; 
  struct ThreadJc_t* thread;   /**/
  int32 nrofBytesReceived[1];   /**/
  int8 data_rxBuffer[1500];   /*Use a static receive buffer. It is important for C-applications. */
  PtrVal_int8 rxBuffer;   /*For C: store the reference and length of the SimpleArray in the next structure. */
  struct Address_InterProcessComm_t* myAnswerAddress;   /**/
  C_threadRoutine_InterProcessCommRxThread_Ipc_s threadRoutine; 
} InterProcessCommRxThread_Ipc_s;
  

#define sizeof_InterProcessCommRxThread_Ipc_s sizeof(InterProcessCommRxThread_Ipc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InterProcessCommRxThread_IpcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define InterProcessCommRxThread_IpcREFDEF
  struct InterProcessCommRxThread_Ipc_t;
  DEFINE_EnhancedRefJc(InterProcessCommRxThread_Ipc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InterProcessCommRxThread_Ipc_X_t { ObjectArrayJc head; InterProcessCommRxThread_IpcREF data[50]; } InterProcessCommRxThread_Ipc_X;
typedef struct InterProcessCommRxThread_Ipc_Y_t { ObjectArrayJc head; InterProcessCommRxThread_Ipc_s data[50]; } InterProcessCommRxThread_Ipc_Y;

 extern_C struct ClassJc_t const reflection_InterProcessCommRxThread_Ipc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InterProcessCommRxThread_Ipc(OBJP) { CONST_ObjectJc(sizeof(InterProcessCommRxThread_Ipc_s), OBJP, &reflection_InterProcessCommRxThread_Ipc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InterProcessCommRxThread_Ipc_F(ObjectJc* othis, ThCxt* _thCxt);




/**Creates the communication for the inspector.*/
METHOD_C struct InterProcessCommRxThread_Ipc_t* ctorO_InterProcessCommRxThread_Ipc(ObjectJc* othis, StringJc ownAddrIpc, struct InterProcessCommRx_ifc_Ipc_t* execRxData, ThCxt* _thCxt);

METHOD_C struct InterProcessCommRxThread_Ipc_t* create_InterProcessCommRxThread_Ipc(/*static*/ StringJc ownAddrIpc, struct InterProcessCommRx_ifc_Ipc_t* execRxData, ThCxt* _thCxt);

METHOD_C bool openComm_InterProcessCommRxThread_Ipc(InterProcessCommRxThread_Ipc_s* thiz, bool blocking, ThCxt* _thCxt);

METHOD_C void start_InterProcessCommRxThread_Ipc(InterProcessCommRxThread_Ipc_s* thiz, ThCxt* _thCxt);

METHOD_C void runThread_InterProcessCommRxThread_Ipc(InterProcessCommRxThread_Ipc_s* thiz, ThCxt* _thCxt);

METHOD_C void receiveAndExecute_InterProcessCommRxThread_Ipc(InterProcessCommRxThread_Ipc_s* thiz, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_InterProcessCommRxThread_Ipc[]; //marker for methodTable check
typedef struct Mtbl_InterProcessCommRxThread_Ipc_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_InterProcessCommRxThread_Ipc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InterProcessCommRxThread_Ipc : private InterProcessCommRxThread_Ipc_s
{ public:

  struct InterProcessCommRxThread_Ipc_t* create(StringJcpp ownAddrIpc, struct InterProcessCommRx_ifc_Ipc_t* execRxData){  return create_InterProcessCommRxThread_Ipc(ownAddrIpc, execRxData,  null/*_thCxt*/); }

  InterProcessCommRxThread_Ipc(StringJcpp ownAddrIpc, struct InterProcessCommRx_ifc_Ipc_t* execRxData){ init_ObjectJc(&this->base.object, sizeof(InterProcessCommRxThread_Ipc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_InterProcessCommRxThread_Ipc_s, 0); ctorO_InterProcessCommRxThread_Ipc(&this->base.object, ownAddrIpc, execRxData,  null/*_thCxt*/); }

  bool openComm(bool blocking){  return openComm_InterProcessCommRxThread_Ipc(this, blocking,  null/*_thCxt*/); }

  void receiveAndExecute(){ receiveAndExecute_InterProcessCommRxThread_Ipc(this,  null/*_thCxt*/); }

  void runThread(){ runThread_InterProcessCommRxThread_Ipc(this,  null/*_thCxt*/); }

  void start(){ start_InterProcessCommRxThread_Ipc(this,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__Ipc2c_InterProcessCommRxThread_Ipc_h__
